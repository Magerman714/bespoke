generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model User {
  id                      Int              @id @default(autoincrement())
  email                   String           @unique
  name                    String
  thumbnail               String?
  weight                  Int?
  favAddresses            String[]
  homeAddress             String?
  rides                   Rides[]
  location_lat            Float?
  location_lng            Float?
  createdRoutes           BikeRoutes[]
  reports                 Report[]
  theme                   Boolean          @default(false)
  sentMessages            DirectMessages[] @relation("SentMessages")
  receivedMessages        DirectMessages[] @relation("ReceivedMessages")
  favoriteRoutes          RouteLike[]
  joinDate                DateTime         @default(now())
  lastLoginDate           DateTime         @default(now())
  firstRideCity           String           @default("")
  firstRideCountry        String           @default("")
  monthlyMiles            Int              @default(0)
  ridesThisWeek           Int              @default(0)
  monthlyDownvotedReports Int              @default(0)
  totalRoutes             Int              @default(0)
  totalReports            Int              @default(0)
  totalPosts              Int              @default(0)
  totalMiles              Int              @default(0)
  totalLikesReceived      Int              @default(0)
  badges                  BadgesOnUsers[]
}

model DirectMessages {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  text       String
  fromMe     Boolean
  createdAt  DateTime @default(now())
}

model BadgesOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  badge      Badge    @relation(fields: [badgeId], references: [id])
  badgeId    Int
  counter    Int?
  assignedAt DateTime @default(now())

  @@id([userId, badgeId])
}

model Badge {
  id        Int             @id @default(autoincrement())
  name      String
  badgeIcon String
  tier      Int?
  users     BadgesOnUsers[]
}

model Report {
  id           String    @id @default(uuid())
  title        String?
  body         String?
  type         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  published    Boolean   @default(true)
  location_lat Float?
  location_lng Float?
  userId       Int
  author       User      @relation(fields: [userId], references: [id])
  imgUrl       String?
  comments     Comment[]
}

model Bulletin {
  id        Int         @id @default(autoincrement())
  topic     String
  creator   String
  text      String
  createdAt DateTime    @default(now())
  equipment Equipment[]
  comments  Comment[]
}

model Equipment {
  id                   Int       @id @default(autoincrement())
  equipmentOrigin      String
  equipmentDescription String
  equipmentType        String
  imgUrl               String?
  bulletin             Bulletin? @relation(fields: [bulletinId], references: [id])
  bulletinId           Int?
}

model Comment {
  id             Int       @id @default(autoincrement())
  bulletinOrigin Int?
  commentCreator String
  commentText    String
  createdAt      DateTime  @default(now())
  report         Report?   @relation(fields: [reportId], references: [id])
  reportId       String?
  bulletin       Bulletin? @relation(fields: [bulletinOrigin], references: [id])
}

model BikeRoutes {
  id          Int         @id @default(autoincrement())
  name        String?
  category    String?
  createdAt   DateTime    @default(now())
  userId      Int
  destination Decimal[]
  origin      Decimal[]
  likes       Int?        @default(0)
  isPrivate   Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id])
  userLikes   RouteLike[]
}

model RouteLike {
  id          Int        @id @default(autoincrement())
  createAt    DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  bikeRoutes  BikeRoutes @relation(fields: [bikeRouteId], references: [id])
  bikeRouteId Int
  likeBool    Boolean    @default(true)
}

model Rides {
  id       Int    @id @default(autoincrement())
  activity String
  duration Int
  weight   Int
  calories Int
  User     User?  @relation(fields: [userId], references: [id])
  userId   Int?
}
