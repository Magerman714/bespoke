generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model User {
  id                      Int             @id @default(autoincrement())
  email                   String          @unique
  name                    String
  thumbnail               String?
  weight                  Int?
  favAddresses            String[]
  homeAddress             String?
  rides                   Rides[]
  location_lat            Float?
  location_lng            Float?
  createdRoutes           BikeRoutes[]
  reports                 Report[]
  joinDate                DateTime        @default(now())
  profileComplete         Boolean         @default(false)
  firstRideCity           String          @default("")
  firstRideCountry        String          @default("")
  monthlyMiles            Int             @default(0)
  mostMonthlyMiles        Int             @default(0)
  totalMiles              Int             @default(0)
  totalBadWeatherMiles    Int             @default(0)
  totalGoodWeatherMiles   Int             @default(0)
  totalCaloriesBurned     Int             @default(0)
  totalMinutesAboveTime   Int             @default(0)
  highestRideStreak       Int             @default(0)
  mostWeeklyRides         Int             @default(0)
  ridesThisWeek           Int             @default(0)
  totalRides              Int             @default(0)
  totalPosts              Int             @default(0)
  totalReports            Int             @default(0)
  totalDownvotedReports   Int             @default(0)
  monthlyDownvotedReports Int             @default(0)
  totalRoutes             Int             @default(0)
  totalLikesGiven         Int             @default(0)
  totalLikesReceived      Int             @default(0)
  badges                  BadgesOnUsers[]
}

model BadgesOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  badge      Badge    @relation(fields: [badgeId], references: [id])
  badgeId    Int
  assignedAt DateTime @default(now())

  @@id([userId, badgeId])
}

model Badge {
  id        Int             @id @default(autoincrement())
  name      String
  badgeIcon String
  users     BadgesOnUsers[]
}

model Report {
  id           String    @id @default(uuid())
  title        String?
  body         String?
  type         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  published    Boolean   @default(false)
  location_lat Float?
  location_lng Float?
  userId       Int
  author       User      @relation(fields: [userId], references: [id])
  imgUrl       String?
  comments     Comment[]
}

model Bulletin {
  id        Int         @id @default(autoincrement())
  topic     String
  creator   String
  text      String
  createdAt DateTime    @default(now())
  equipment Equipment[]
  comments  Comment[]
}

model Equipment {
  id            Int       @id @default(autoincrement())
  equipmentType String
  imgUrl        String[]
  bulletin      Bulletin? @relation(fields: [bulletinId], references: [id])
  bulletinId    Int
}

model Comment {
  id             Int       @id @default(autoincrement())
  bulletinOrigin Int?
  commentCreator String
  commentText    String
  createdAt      DateTime  @default(now())
  report         Report?   @relation(fields: [reportId], references: [id])
  reportId       String?
  bulletin       Bulletin? @relation(fields: [bulletinOrigin], references: [id])
}

model BikeRoutes {
  id          Int       @id @default(autoincrement())
  name        String?
  category    String?
  createdAt   DateTime  @default(now())
  userId      Int
  destination Decimal[]
  origin      Decimal[]
  likes       Int?      @default(0)
  isPrivate   Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
}

model Rides {
  id       Int    @id @default(autoincrement())
  activity String
  duration Int
  weight   Int
  calories Int
  User     User?  @relation(fields: [userId], references: [id])
  userId   Int?
}
